{"version":3,"sources":["components/Button/Button.js","components/ButtonReset/ButtonReset.js","components/GameLogic/GameLogic.js","components/Popup/Popup.js","utils/constants.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Button","title","onClick","className","ButtonReset","gameLogic","this","numberMoves","walkValue","field","victoriousPositions","isPlayCrosses","i","console","log","j","possibleWinMan","length","countComputer","countMan","a","b","push","getRandomNumber","min","max","Math","floor","random","Popup","isOpen","reset","popupMessage","draw","x","o","App","React","useState","isPlay","setIsPlay","isPopupOpen","setIsPopupOpen","popupTitle","setPopupTitle","getField","setField","resetField","checkWinAndDraw","isMove","newIsPopupOpen","Boolean","useEffect","disabled","setisPlayCrosses","makeMove","map","line","idLine","cell","idCell","value","isManMove","manMakeMove","isGameOver","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e796922.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nfunction Button({ title, onClick }) {\n  return (\n    <button onClick={onClick} className=\"button\">\n      {title}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport './ButtonReset.css';\n\nfunction ButtonReset({ onClick }) {\n  return (\n    <button onClick={onClick} className=\"button-reset\">\n      Начать заново\n    </button>\n  );\n}\n\nexport default ButtonReset;\n","class GameLogic {\r\n  constructor() {\r\n    this.numberMoves = 0;\r\n    this.walkValue = 'o';\r\n    this.field = [\r\n      [null, null, null],\r\n      [null, null, null],\r\n      [null, null, null],\r\n    ];\r\n    this.victoriousPositions = [\r\n      [\r\n        [0, 0],\r\n        [0, 1],\r\n        [0, 2],\r\n      ],\r\n      [\r\n        [1, 0],\r\n        [1, 1],\r\n        [1, 2],\r\n      ],\r\n      [\r\n        [2, 0],\r\n        [2, 1],\r\n        [2, 2],\r\n      ],\r\n\r\n      [\r\n        [0, 0],\r\n        [1, 0],\r\n        [2, 0],\r\n      ],\r\n      [\r\n        [0, 1],\r\n        [1, 1],\r\n        [2, 1],\r\n      ],\r\n      [\r\n        [0, 2],\r\n        [1, 2],\r\n        [2, 2],\r\n      ],\r\n\r\n      [\r\n        [0, 0],\r\n        [1, 1],\r\n        [2, 2],\r\n      ],\r\n      [\r\n        [2, 0],\r\n        [1, 1],\r\n        [0, 2],\r\n      ],\r\n    ];\r\n  }\r\n\r\n  getField() {\r\n    return this.field;\r\n  }\r\n\r\n  setisPlayCrosses(isPlayCrosses) {\r\n    this.walkValue = isPlayCrosses ? 'x' : 'o';\r\n  }\r\n\r\n  resetField() {\r\n    this.numberMoves = 0;\r\n    this.field = [\r\n      [null, null, null],\r\n      [null, null, null],\r\n      [null, null, null],\r\n    ];\r\n  }\r\n\r\n  checkWinAndDraw() {\r\n    this.numberMoves++;\r\n    // проверяем есть ли победитель\r\n    for (let i = 0; i < 3; i++) {\r\n      if (\r\n        this.field[i][0] &&\r\n        this.field[i][0] === this.field[i][1] &&\r\n        this.field[i][0] === this.field[i][2]\r\n      ) {\r\n        return this.field[i][0];\r\n      }\r\n\r\n      if (\r\n        this.field[0][i] &&\r\n        this.field[0][i] === this.field[1][i] &&\r\n        this.field[0][i] === this.field[2][i]\r\n      ) {\r\n        return this.field[0][i];\r\n      }\r\n    }\r\n    if (\r\n      this.field[0][0] &&\r\n      this.field[0][0] === this.field[1][1] &&\r\n      this.field[0][0] === this.field[2][2]\r\n    ) {\r\n      return this.field[0][0];\r\n    }\r\n    if (\r\n      this.field[2][0] &&\r\n      this.field[2][0] === this.field[1][1] &&\r\n      this.field[2][0] === this.field[0][2]\r\n    ) {\r\n      return this.field[2][0];\r\n    }\r\n    // проверка на ничью\r\n    console.log(this.numberMoves);\r\n    if (this.numberMoves >= 9) return 'draw';\r\n\r\n    return null;\r\n  }\r\n\r\n  manMakeMove(i, j) {\r\n    this.field[i][j] = this.walkValue === 'x' ? 'o' : 'x';\r\n  }\r\n\r\n  makeMove() {\r\n    const possibleWinMan = [];\r\n    // ищем выиграшный ход\r\n    for (let i = 0; i < this.victoriousPositions.length; i++) {\r\n      let countComputer = 0;\r\n      let countMan = 0;\r\n      for (let j = 0; j < 3; j++) {\r\n        const [a, b] = this.victoriousPositions[i][j];\r\n        if (this.field[a][b]) {\r\n          if (this.field[a][b] === this.walkValue) countComputer++;\r\n          else countMan++;\r\n        }\r\n      }\r\n      if (countComputer === 2) {\r\n        for (let j = 0; j < 3; j++) {\r\n          const [a, b] = this.victoriousPositions[i][j];\r\n          if (!this.field[a][b]) {\r\n            this.field[a][b] = this.walkValue;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      // сохраняем возможные выиграши человека, на случай если компьютер не может выиграть\r\n      if (countMan === 2) possibleWinMan.push(i);\r\n    }\r\n    // делаем ход, мешающий человеку выиграть (если есть)\r\n    for (let i = 0; i < possibleWinMan.length; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        const [a, b] = this.victoriousPositions[possibleWinMan[i]][j];\r\n        if (!this.field[a][b]) {\r\n          this.field[a][b] = this.walkValue;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    // случайный ход\r\n    for (let i = this.getRandomNumber(0, 2); ; i++) {\r\n      for (let j = this.getRandomNumber(0, 2); j < 3; j++) {\r\n        if (!this.field[i % 3][j]) {\r\n          this.field[i % 3][j] = this.walkValue;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getRandomNumber(min, max) {\r\n    return Math.floor(min + Math.random() * (max + 1 - min));\r\n  }\r\n}\r\n\r\nconst gameLogic = new GameLogic();\r\nexport default gameLogic;\r\n","import './Popup.css';\r\nimport ButtonReset from '../ButtonReset/ButtonReset';\r\n\r\nfunction Popup({ isOpen, title, reset }) {\r\n  return (\r\n    <div className={`popup ${isOpen ? 'popup_is-opened' : ''}`}>\r\n      <div className=\"popup__container\">\r\n        <h2 className=\"popup__title\">{title}</h2>\r\n        <ButtonReset onClick={reset} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Popup;\r\n","export const popupMessage = {\r\n  draw: 'Ничья!',\r\n  x: 'Победили крестики!',\r\n  o: 'Победили нолики!',\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Button from '../Button/Button';\nimport ButtonReset from '../ButtonReset/ButtonReset';\nimport gameLogic from '../GameLogic/GameLogic';\nimport Popup from '../Popup/Popup';\nimport { popupMessage } from '../../utils/constants';\n\nfunction App() {\n  const [isPlay, setIsPlay] = React.useState(false);\n  const [isPopupOpen, setIsPopupOpen] = React.useState(false);\n  const [popupTitle, setPopupTitle] = React.useState('');\n  const [field, setField] = React.useState(gameLogic.getField());\n\n  React.useEffect(() => {}, [field]);\n\n  function reset() {\n    setIsPlay(false);\n    gameLogic.resetField();\n    setField([...gameLogic.getField()]);\n    setIsPopupOpen(false);\n    setPopupTitle('');\n  }\n\n  function checkWinAndDraw(isMove) {\n    let checkWinAndDraw = false;\n    if (isMove) checkWinAndDraw = gameLogic.checkWinAndDraw();\n    const newIsPopupOpen = Boolean(checkWinAndDraw);\n    console.log(checkWinAndDraw);\n    setPopupTitle(popupMessage[checkWinAndDraw]);\n    setIsPopupOpen(newIsPopupOpen);\n    return newIsPopupOpen;\n  }\n\n  function playForCrosses() {\n    gameLogic.setisPlayCrosses(false);\n    setIsPlay(true);\n  }\n\n  function playforZeroes() {\n    gameLogic.setisPlayCrosses(true);\n    setIsPlay(true);\n    gameLogic.makeMove();\n    setField([...field]);\n    checkWinAndDraw(true);\n  }\n\n  function makeMove(value, idLine, idCell) {\n    const isManMove = isPlay && !value;\n    // ход человека\n    if (isManMove) gameLogic.manMakeMove(idLine, idCell);\n    setField([...gameLogic.getField()]);\n    const isGameOver = checkWinAndDraw(isManMove);\n    const isComputerMove = isManMove && !isGameOver;\n    if (isComputerMove) gameLogic.makeMove();\n    setField([...gameLogic.getField()]);\n    checkWinAndDraw(isManMove);\n  }\n\n  return (\n    <>\n      <div className=\"app\">\n        <fieldset disabled={isPlay} className=\"app__buttons-container\">\n          <Button onClick={playForCrosses} title=\"Играть за крестики\" />\n          <Button onClick={playforZeroes} title=\"Играть за нолики\" />\n        </fieldset>\n        <div className=\"app__field\">\n          {field.map((line, idLine) => (\n            <div key={idLine} className=\"app__line\">\n              {line.map((cell, idCell) => (\n                <div\n                  onClick={() => makeMove(cell, idLine, idCell)}\n                  key={idCell}\n                  className={`app__cell \n                  ${!isPlay && 'app__cell_disabled'} \n                  ${idLine === 0 && 'app__cell_top'} \n                  ${idLine === 2 && 'app__cell_bottom'} \n                  ${idCell === 0 && 'app__cell_left'} \n                  ${idCell === 2 && 'app__cell_right'}\n                `}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n        <ButtonReset onClick={reset} />\n      </div>\n      <Popup isOpen={isPopupOpen} title={popupTitle} reset={reset} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}